/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.rpc.Block');
goog.provide('proto.rpc.BlockHeader');
goog.provide('proto.rpc.Empty');
goog.provide('proto.rpc.Peer');
goog.provide('proto.rpc.Peers');
goog.provide('proto.rpc.Transaction');
goog.provide('proto.rpc.TransactionHeader');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.TransactionHeader = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.TransactionHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.rpc.TransactionHeader.displayName = 'proto.rpc.TransactionHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.rpc.TransactionHeader.prototype.toObject = function (opt_includeInstance) {
        return proto.rpc.TransactionHeader.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.rpc.TransactionHeader} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.rpc.TransactionHeader.toObject = function (includeInstance, msg) {
        var f, obj = {
            from: msg.getFrom_asB64(),
            to: msg.getTo_asB64(),
            timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
            payloadhash: msg.getPayloadhash_asB64(),
            payloadlength: jspb.Message.getFieldWithDefault(msg, 5, 0),
            nonce: jspb.Message.getFieldWithDefault(msg, 6, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.TransactionHeader}
 */
proto.rpc.TransactionHeader.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.rpc.TransactionHeader;
    return proto.rpc.TransactionHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.TransactionHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.TransactionHeader}
 */
proto.rpc.TransactionHeader.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setFrom(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setTo(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setTimestamp(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setPayloadhash(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setPayloadlength(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setNonce(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.TransactionHeader.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.rpc.TransactionHeader.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.TransactionHeader} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.TransactionHeader.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFrom_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            1,
            f
        );
    }
    f = message.getTo_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            2,
            f
        );
    }
    f = message.getTimestamp();
    if (f !== 0) {
        writer.writeUint32(
            3,
            f
        );
    }
    f = message.getPayloadhash_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            4,
            f
        );
    }
    f = message.getPayloadlength();
    if (f !== 0) {
        writer.writeUint32(
            5,
            f
        );
    }
    f = message.getNonce();
    if (f !== 0) {
        writer.writeUint32(
            6,
            f
        );
    }
};


/**
 * optional bytes From = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.TransactionHeader.prototype.getFrom = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes From = 1;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.rpc.TransactionHeader.prototype.getFrom_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getFrom()));
};


/**
 * optional bytes From = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.rpc.TransactionHeader.prototype.getFrom_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getFrom()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.TransactionHeader.prototype.setFrom = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes To = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.TransactionHeader.prototype.getTo = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes To = 2;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.rpc.TransactionHeader.prototype.getTo_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getTo()));
};


/**
 * optional bytes To = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.rpc.TransactionHeader.prototype.getTo_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getTo()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.TransactionHeader.prototype.setTo = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 Timestamp = 3;
 * @return {number}
 */
proto.rpc.TransactionHeader.prototype.getTimestamp = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpc.TransactionHeader.prototype.setTimestamp = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes PayloadHash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.TransactionHeader.prototype.getPayloadhash = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes PayloadHash = 4;
 * This is a type-conversion wrapper around `getPayloadhash()`
 * @return {string}
 */
proto.rpc.TransactionHeader.prototype.getPayloadhash_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getPayloadhash()));
};


/**
 * optional bytes PayloadHash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayloadhash()`
 * @return {!Uint8Array}
 */
proto.rpc.TransactionHeader.prototype.getPayloadhash_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getPayloadhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.TransactionHeader.prototype.setPayloadhash = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 PayloadLength = 5;
 * @return {number}
 */
proto.rpc.TransactionHeader.prototype.getPayloadlength = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.rpc.TransactionHeader.prototype.setPayloadlength = function (value) {
    jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 Nonce = 6;
 * @return {number}
 */
proto.rpc.TransactionHeader.prototype.getNonce = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.rpc.TransactionHeader.prototype.setNonce = function (value) {
    jspb.Message.setField(this, 6, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.Transaction = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.rpc.Transaction.displayName = 'proto.rpc.Transaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.rpc.Transaction.prototype.toObject = function (opt_includeInstance) {
        return proto.rpc.Transaction.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.rpc.Transaction} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.rpc.Transaction.toObject = function (includeInstance, msg) {
        var f, obj = {
            header: (f = msg.getHeader()) && proto.rpc.TransactionHeader.toObject(includeInstance, f),
            hash: msg.getHash_asB64(),
            payload: msg.getPayload_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.Transaction}
 */
proto.rpc.Transaction.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.rpc.Transaction;
    return proto.rpc.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.Transaction}
 */
proto.rpc.Transaction.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.rpc.TransactionHeader;
                reader.readMessage(value, proto.rpc.TransactionHeader.deserializeBinaryFromReader);
                msg.setHeader(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setHash(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setPayload(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.Transaction.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.rpc.Transaction.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.Transaction.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getHeader();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.rpc.TransactionHeader.serializeBinaryToWriter
        );
    }
    f = message.getHash_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            2,
            f
        );
    }
    f = message.getPayload_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            3,
            f
        );
    }
};


/**
 * optional TransactionHeader Header = 1;
 * @return {?proto.rpc.TransactionHeader}
 */
proto.rpc.Transaction.prototype.getHeader = function () {
    return /** @type{?proto.rpc.TransactionHeader} */ (
        jspb.Message.getWrapperField(this, proto.rpc.TransactionHeader, 1));
};


/** @param {?proto.rpc.TransactionHeader|undefined} value */
proto.rpc.Transaction.prototype.setHeader = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.rpc.Transaction.prototype.clearHeader = function () {
    this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rpc.Transaction.prototype.hasHeader = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes Hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.Transaction.prototype.getHash = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.rpc.Transaction.prototype.getHash_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getHash()));
};


/**
 * optional bytes Hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.rpc.Transaction.prototype.getHash_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.Transaction.prototype.setHash = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes Payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.Transaction.prototype.getPayload = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes Payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.rpc.Transaction.prototype.getPayload_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getPayload()));
};


/**
 * optional bytes Payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.rpc.Transaction.prototype.getPayload_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.Transaction.prototype.setPayload = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.BlockHeader = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.BlockHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.rpc.BlockHeader.displayName = 'proto.rpc.BlockHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.rpc.BlockHeader.prototype.toObject = function (opt_includeInstance) {
        return proto.rpc.BlockHeader.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.rpc.BlockHeader} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.rpc.BlockHeader.toObject = function (includeInstance, msg) {
        var f, obj = {
            version: jspb.Message.getFieldWithDefault(msg, 1, 0),
            origin: msg.getOrigin_asB64(),
            prevhash: msg.getPrevhash_asB64(),
            merkelroot: msg.getMerkelroot_asB64(),
            timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
            nonce: jspb.Message.getFieldWithDefault(msg, 6, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.BlockHeader}
 */
proto.rpc.BlockHeader.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.rpc.BlockHeader;
    return proto.rpc.BlockHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.BlockHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.BlockHeader}
 */
proto.rpc.BlockHeader.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setVersion(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setOrigin(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setPrevhash(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setMerkelroot(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setTimestamp(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setNonce(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.BlockHeader.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.rpc.BlockHeader.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.BlockHeader} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.BlockHeader.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getVersion();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getOrigin_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            2,
            f
        );
    }
    f = message.getPrevhash_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            3,
            f
        );
    }
    f = message.getMerkelroot_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            4,
            f
        );
    }
    f = message.getTimestamp();
    if (f !== 0) {
        writer.writeUint32(
            5,
            f
        );
    }
    f = message.getNonce();
    if (f !== 0) {
        writer.writeUint32(
            6,
            f
        );
    }
};


/**
 * optional int32 Version = 1;
 * @return {number}
 */
proto.rpc.BlockHeader.prototype.getVersion = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpc.BlockHeader.prototype.setVersion = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes Origin = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.BlockHeader.prototype.getOrigin = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Origin = 2;
 * This is a type-conversion wrapper around `getOrigin()`
 * @return {string}
 */
proto.rpc.BlockHeader.prototype.getOrigin_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getOrigin()));
};


/**
 * optional bytes Origin = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrigin()`
 * @return {!Uint8Array}
 */
proto.rpc.BlockHeader.prototype.getOrigin_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getOrigin()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.BlockHeader.prototype.setOrigin = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes PrevHash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.BlockHeader.prototype.getPrevhash = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes PrevHash = 3;
 * This is a type-conversion wrapper around `getPrevhash()`
 * @return {string}
 */
proto.rpc.BlockHeader.prototype.getPrevhash_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getPrevhash()));
};


/**
 * optional bytes PrevHash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevhash()`
 * @return {!Uint8Array}
 */
proto.rpc.BlockHeader.prototype.getPrevhash_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getPrevhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.BlockHeader.prototype.setPrevhash = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes MerkelRoot = 4;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.BlockHeader.prototype.getMerkelroot = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes MerkelRoot = 4;
 * This is a type-conversion wrapper around `getMerkelroot()`
 * @return {string}
 */
proto.rpc.BlockHeader.prototype.getMerkelroot_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getMerkelroot()));
};


/**
 * optional bytes MerkelRoot = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMerkelroot()`
 * @return {!Uint8Array}
 */
proto.rpc.BlockHeader.prototype.getMerkelroot_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getMerkelroot()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.BlockHeader.prototype.setMerkelroot = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 Timestamp = 5;
 * @return {number}
 */
proto.rpc.BlockHeader.prototype.getTimestamp = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.rpc.BlockHeader.prototype.setTimestamp = function (value) {
    jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 Nonce = 6;
 * @return {number}
 */
proto.rpc.BlockHeader.prototype.getNonce = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.rpc.BlockHeader.prototype.setNonce = function (value) {
    jspb.Message.setField(this, 6, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.Block = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.Block.repeatedFields_, null);
};
goog.inherits(proto.rpc.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.rpc.Block.displayName = 'proto.rpc.Block';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.Block.repeatedFields_ = [3];


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.rpc.Block.prototype.toObject = function (opt_includeInstance) {
        return proto.rpc.Block.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.rpc.Block} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.rpc.Block.toObject = function (includeInstance, msg) {
        var f, obj = {
            blockheader: (f = msg.getBlockheader()) && proto.rpc.BlockHeader.toObject(includeInstance, f),
            hash: msg.getHash_asB64(),
            transactionList: jspb.Message.toObjectList(msg.getTransactionList(),
                proto.rpc.Transaction.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.Block}
 */
proto.rpc.Block.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.rpc.Block;
    return proto.rpc.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.Block}
 */
proto.rpc.Block.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.rpc.BlockHeader;
                reader.readMessage(value, proto.rpc.BlockHeader.deserializeBinaryFromReader);
                msg.setBlockheader(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setHash(value);
                break;
            case 3:
                var value = new proto.rpc.Transaction;
                reader.readMessage(value, proto.rpc.Transaction.deserializeBinaryFromReader);
                msg.addTransaction(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.Block.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.rpc.Block.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.Block} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.Block.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlockheader();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.rpc.BlockHeader.serializeBinaryToWriter
        );
    }
    f = message.getHash_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            2,
            f
        );
    }
    f = message.getTransactionList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            3,
            f,
            proto.rpc.Transaction.serializeBinaryToWriter
        );
    }
};


/**
 * optional BlockHeader BlockHeader = 1;
 * @return {?proto.rpc.BlockHeader}
 */
proto.rpc.Block.prototype.getBlockheader = function () {
    return /** @type{?proto.rpc.BlockHeader} */ (
        jspb.Message.getWrapperField(this, proto.rpc.BlockHeader, 1));
};


/** @param {?proto.rpc.BlockHeader|undefined} value */
proto.rpc.Block.prototype.setBlockheader = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.rpc.Block.prototype.clearBlockheader = function () {
    this.setBlockheader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rpc.Block.prototype.hasBlockheader = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes Hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.Block.prototype.getHash = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.rpc.Block.prototype.getHash_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getHash()));
};


/**
 * optional bytes Hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.rpc.Block.prototype.getHash_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.Block.prototype.setHash = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * repeated Transaction Transaction = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rpc.Transaction>}
 */
proto.rpc.Block.prototype.getTransactionList = function () {
    return /** @type{!Array.<!proto.rpc.Transaction>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.rpc.Transaction, 3));
};


/** @param {!Array.<!proto.rpc.Transaction>} value */
proto.rpc.Block.prototype.setTransactionList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.rpc.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.Transaction}
 */
proto.rpc.Block.prototype.addTransaction = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rpc.Transaction, opt_index);
};


proto.rpc.Block.prototype.clearTransactionList = function () {
    this.setTransactionList([]);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.Peer = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.Peer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.rpc.Peer.displayName = 'proto.rpc.Peer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.rpc.Peer.prototype.toObject = function (opt_includeInstance) {
        return proto.rpc.Peer.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.rpc.Peer} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.rpc.Peer.toObject = function (includeInstance, msg) {
        var f, obj = {
            addr: jspb.Message.getFieldWithDefault(msg, 1, ""),
            publickey: jspb.Message.getFieldWithDefault(msg, 2, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.Peer}
 */
proto.rpc.Peer.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.rpc.Peer;
    return proto.rpc.Peer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.Peer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.Peer}
 */
proto.rpc.Peer.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddr(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPublickey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.Peer.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.rpc.Peer.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.Peer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.Peer.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAddr();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getPublickey();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
};


/**
 * optional string Addr = 1;
 * @return {string}
 */
proto.rpc.Peer.prototype.getAddr = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.rpc.Peer.prototype.setAddr = function (value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional string PublicKey = 2;
 * @return {string}
 */
proto.rpc.Peer.prototype.getPublickey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpc.Peer.prototype.setPublickey = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.Peers = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.Peers.repeatedFields_, null);
};
goog.inherits(proto.rpc.Peers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.rpc.Peers.displayName = 'proto.rpc.Peers';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.Peers.repeatedFields_ = [1];


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.rpc.Peers.prototype.toObject = function (opt_includeInstance) {
        return proto.rpc.Peers.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.rpc.Peers} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.rpc.Peers.toObject = function (includeInstance, msg) {
        var f, obj = {
            peerList: jspb.Message.toObjectList(msg.getPeerList(),
                proto.rpc.Peer.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.Peers}
 */
proto.rpc.Peers.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.rpc.Peers;
    return proto.rpc.Peers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.Peers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.Peers}
 */
proto.rpc.Peers.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.rpc.Peer;
                reader.readMessage(value, proto.rpc.Peer.deserializeBinaryFromReader);
                msg.addPeer(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.Peers.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.rpc.Peers.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.Peers} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.Peers.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPeerList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.rpc.Peer.serializeBinaryToWriter
        );
    }
};


/**
 * repeated Peer Peer = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rpc.Peer>}
 */
proto.rpc.Peers.prototype.getPeerList = function () {
    return /** @type{!Array.<!proto.rpc.Peer>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.rpc.Peer, 1));
};


/** @param {!Array.<!proto.rpc.Peer>} value */
proto.rpc.Peers.prototype.setPeerList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rpc.Peer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.Peer}
 */
proto.rpc.Peers.prototype.addPeer = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rpc.Peer, opt_index);
};


proto.rpc.Peers.prototype.clearPeerList = function () {
    this.setPeerList([]);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.Empty = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.rpc.Empty.displayName = 'proto.rpc.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.rpc.Empty.prototype.toObject = function (opt_includeInstance) {
        return proto.rpc.Empty.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.rpc.Empty} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.rpc.Empty.toObject = function (includeInstance, msg) {
        var f, obj = {};

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.Empty}
 */
proto.rpc.Empty.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.rpc.Empty;
    return proto.rpc.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.Empty}
 */
proto.rpc.Empty.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.Empty.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.rpc.Empty.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.Empty} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rpc.Empty.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};


