// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hathcoin.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Hathcoin.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - HathcoinRoot

@implementation HathcoinRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - HathcoinRoot_FileDescriptor

static GPBFileDescriptor *HathcoinRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rpc"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TransactionHeader

@implementation TransactionHeader

@dynamic from;
@dynamic to;
@dynamic timestamp;
@dynamic payloadHash;
@dynamic payloadLength;
@dynamic nonce;

typedef struct TransactionHeader__storage_ {
  uint32_t _has_storage_[1];
  uint32_t timestamp;
  uint32_t payloadLength;
  uint32_t nonce;
  NSData *from;
  NSData *to;
  NSData *payloadHash;
} TransactionHeader__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = TransactionHeader_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransactionHeader__storage_, from),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = TransactionHeader_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransactionHeader__storage_, to),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = TransactionHeader_FieldNumber_Timestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransactionHeader__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "payloadHash",
        .dataTypeSpecific.className = NULL,
        .number = TransactionHeader_FieldNumber_PayloadHash,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TransactionHeader__storage_, payloadHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "payloadLength",
        .dataTypeSpecific.className = NULL,
        .number = TransactionHeader_FieldNumber_PayloadLength,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TransactionHeader__storage_, payloadLength),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nonce",
        .dataTypeSpecific.className = NULL,
        .number = TransactionHeader_FieldNumber_Nonce,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TransactionHeader__storage_, nonce),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransactionHeader class]
                                     rootClass:[HathcoinRoot class]
                                          file:HathcoinRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransactionHeader__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001D\000\002B\000\003I\000\004K\000\005M\000\006E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Transaction

@implementation Transaction

@dynamic hasHeader, header;
@dynamic hash_p;
@dynamic payload;

typedef struct Transaction__storage_ {
  uint32_t _has_storage_[1];
  TransactionHeader *header;
  NSData *hash_p;
  NSData *payload;
} Transaction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "header",
        .dataTypeSpecific.className = GPBStringifySymbol(TransactionHeader),
        .number = Transaction_FieldNumber_Header,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Transaction__storage_, header),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hash_p",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_Hash_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Transaction__storage_, hash_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_Payload,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Transaction__storage_, payload),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Transaction class]
                                     rootClass:[HathcoinRoot class]
                                          file:HathcoinRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Transaction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001F\000\002\000Hash\000\003G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BlockHeader

@implementation BlockHeader

@dynamic version;
@dynamic origin;
@dynamic prevHash;
@dynamic merkelRoot;
@dynamic timestamp;
@dynamic nonce;

typedef struct BlockHeader__storage_ {
  uint32_t _has_storage_[1];
  int32_t version;
  uint32_t timestamp;
  uint32_t nonce;
  NSData *origin;
  NSData *prevHash;
  NSData *merkelRoot;
} BlockHeader__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = BlockHeader_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BlockHeader__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "origin",
        .dataTypeSpecific.className = NULL,
        .number = BlockHeader_FieldNumber_Origin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BlockHeader__storage_, origin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "prevHash",
        .dataTypeSpecific.className = NULL,
        .number = BlockHeader_FieldNumber_PrevHash,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BlockHeader__storage_, prevHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "merkelRoot",
        .dataTypeSpecific.className = NULL,
        .number = BlockHeader_FieldNumber_MerkelRoot,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BlockHeader__storage_, merkelRoot),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = BlockHeader_FieldNumber_Timestamp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BlockHeader__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nonce",
        .dataTypeSpecific.className = NULL,
        .number = BlockHeader_FieldNumber_Nonce,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(BlockHeader__storage_, nonce),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BlockHeader class]
                                     rootClass:[HathcoinRoot class]
                                          file:HathcoinRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlockHeader__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001G\000\002F\000\003H\000\004J\000\005I\000\006E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Block

@implementation Block

@dynamic hasBlockHeader, blockHeader;
@dynamic hash_p;
@dynamic transactionArray, transactionArray_Count;

typedef struct Block__storage_ {
  uint32_t _has_storage_[1];
  BlockHeader *blockHeader;
  NSData *hash_p;
  NSMutableArray *transactionArray;
} Block__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blockHeader",
        .dataTypeSpecific.className = GPBStringifySymbol(BlockHeader),
        .number = Block_FieldNumber_BlockHeader,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Block__storage_, blockHeader),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hash_p",
        .dataTypeSpecific.className = NULL,
        .number = Block_FieldNumber_Hash_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Block__storage_, hash_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "transactionArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Transaction),
        .number = Block_FieldNumber_TransactionArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Block__storage_, transactionArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Block class]
                                     rootClass:[HathcoinRoot class]
                                          file:HathcoinRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Block__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002\000Hash\000\003\000Transaction\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Peer

@implementation Peer

@dynamic addr;
@dynamic publicKey;

typedef struct Peer__storage_ {
  uint32_t _has_storage_[1];
  NSString *addr;
  NSString *publicKey;
} Peer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addr",
        .dataTypeSpecific.className = NULL,
        .number = Peer_FieldNumber_Addr,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Peer__storage_, addr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publicKey",
        .dataTypeSpecific.className = NULL,
        .number = Peer_FieldNumber_PublicKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Peer__storage_, publicKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Peer class]
                                     rootClass:[HathcoinRoot class]
                                          file:HathcoinRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Peer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001D\000\002I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Peers

@implementation Peers

@dynamic peerArray, peerArray_Count;

typedef struct Peers__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *peerArray;
} Peers__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peerArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Peer),
        .number = Peers_FieldNumber_PeerArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Peers__storage_, peerArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Peers class]
                                     rootClass:[HathcoinRoot class]
                                          file:HathcoinRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Peers__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000Peer\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Empty

@implementation Empty


typedef struct Empty__storage_ {
  uint32_t _has_storage_[1];
} Empty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Empty class]
                                     rootClass:[HathcoinRoot class]
                                          file:HathcoinRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Empty__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
